
keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080010f0  080010f0  000110f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800113c  0800113c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800113c  0800113c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800113c  0800113c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800113c  0800113c  0001113c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001140  08001140  00011140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a02  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000035f  00000000  00000000  00020acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000128  00000000  00000000  00020e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000cc  00000000  00000000  00020f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c89  00000000  00000000  00021024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001553  00000000  00000000  00023cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000097c8  00000000  00000000  00025200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a20  00000000  00000000  0002e9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0002f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080010d8 	.word	0x080010d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080010d8 	.word	0x080010d8

080001c8 <main>:

void readColumnState(volatile uint32_t *const pPinEInReg);
void delay(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
	printf("Hello World\n");
 80001ce:	489d      	ldr	r0, [pc, #628]	; (8000444 <main+0x27c>)
 80001d0:	f000 fbf2 	bl	80009b8 <puts>
	 * PE7, 9, 11, 13 -> input (COLUMNS), PE15, PB11. 13. 15 -> output(ROWS)
	 *
	 * Wiring on 4x4 keypad: R1 R2 R3 R4 C1 C2 C3 C4
	 */

	uint32_t volatile *const pClkCtrlReg 	= (uint32_t*) (0x40023800 + 0x30); 	// RCC_AHB!ENR
 80001d4:	4b9c      	ldr	r3, [pc, #624]	; (8000448 <main+0x280>)
 80001d6:	61fb      	str	r3, [r7, #28]

	uint32_t volatile *const pPinEModeReg 	= (uint32_t*) (0x40021000 + 0x00); 	// GPIOx_MODER
 80001d8:	4b9c      	ldr	r3, [pc, #624]	; (800044c <main+0x284>)
 80001da:	61bb      	str	r3, [r7, #24]
	uint32_t volatile *const pPinEInReg 	= (uint32_t*) (0x40021000 + 0x10);	// GPIOx_IDR
 80001dc:	4b9c      	ldr	r3, [pc, #624]	; (8000450 <main+0x288>)
 80001de:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pPinEOutReg 	= (uint32_t*) (0x40021000 + 0x14);	// GPIOx_ODR
 80001e0:	4b9c      	ldr	r3, [pc, #624]	; (8000454 <main+0x28c>)
 80001e2:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pPinEPullUp	= (uint32_t*) (0x40021000 + 0x0C);	// GPIOx_PUPDR
 80001e4:	4b9c      	ldr	r3, [pc, #624]	; (8000458 <main+0x290>)
 80001e6:	60fb      	str	r3, [r7, #12]

	uint32_t volatile *const pPinBModeReg	= (uint32_t*) (0x40020400 + 0x00);	// GPIOx_MODER
 80001e8:	4b9c      	ldr	r3, [pc, #624]	; (800045c <main+0x294>)
 80001ea:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pPinBOutReg	= (uint32_t*) (0x40020400 + 0x14); 	// GPIOx_ODR
 80001ec:	4b9c      	ldr	r3, [pc, #624]	; (8000460 <main+0x298>)
 80001ee:	607b      	str	r3, [r7, #4]
	/*
	 * Initialization
	 */

	// Enable clock register for GPIOB and E
	*pClkCtrlReg |= 1 << 1;
 80001f0:	69fb      	ldr	r3, [r7, #28]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f043 0202 	orr.w	r2, r3, #2
 80001f8:	69fb      	ldr	r3, [r7, #28]
 80001fa:	601a      	str	r2, [r3, #0]
	*pClkCtrlReg |= 1 << 4;
 80001fc:	69fb      	ldr	r3, [r7, #28]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f043 0210 	orr.w	r2, r3, #16
 8000204:	69fb      	ldr	r3, [r7, #28]
 8000206:	601a      	str	r2, [r3, #0]

	// Clearing/setting mode for PE7, 9, 11, 13 to input (00) - COLUMNS
	*pPinEModeReg &= ~(3 << 14);	// Pin 7 -- C4
 8000208:	69bb      	ldr	r3, [r7, #24]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000210:	69bb      	ldr	r3, [r7, #24]
 8000212:	601a      	str	r2, [r3, #0]
	*pPinEModeReg &= ~(3 << 18);	// Pin 9 -- C3
 8000214:	69bb      	ldr	r3, [r7, #24]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800021c:	69bb      	ldr	r3, [r7, #24]
 800021e:	601a      	str	r2, [r3, #0]
	*pPinEModeReg &= ~(3 << 22);	// Pin 11 -- C2
 8000220:	69bb      	ldr	r3, [r7, #24]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8000228:	69bb      	ldr	r3, [r7, #24]
 800022a:	601a      	str	r2, [r3, #0]
	*pPinEModeReg &= ~(3 << 26);	// Pin 13 -- C1
 800022c:	69bb      	ldr	r3, [r7, #24]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8000234:	69bb      	ldr	r3, [r7, #24]
 8000236:	601a      	str	r2, [r3, #0]

	// Clearing and setting mode for PE15, PB11, 13, 15 to output (01) - ROWS
	*pPinEModeReg &= ~(3 << 30);	// Pin 15 -- R4
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8000240:	69bb      	ldr	r3, [r7, #24]
 8000242:	601a      	str	r2, [r3, #0]
	*pPinEModeReg |= 1 << 30;
 8000244:	69bb      	ldr	r3, [r7, #24]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800024c:	69bb      	ldr	r3, [r7, #24]
 800024e:	601a      	str	r2, [r3, #0]

	*pPinBModeReg &= ~(3 << 22);	// Pin 11 -- R3
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	601a      	str	r2, [r3, #0]
	*pPinBModeReg |= 1 << 22;
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	601a      	str	r2, [r3, #0]
	*pPinBModeReg &= ~(3 << 26);	// Pin 13 -- R2
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	601a      	str	r2, [r3, #0]
	*pPinBModeReg |= 1 << 26;
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	601a      	str	r2, [r3, #0]
	*pPinBModeReg &= ~(3 << 30);	// Pin 15 -- R1
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	601a      	str	r2, [r3, #0]
	*pPinBModeReg |= 1 << 30;
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	601a      	str	r2, [r3, #0]

	// Setting pull-up registers for COLUMNS
	*pPinEPullUp |= 1 << 14;		// Pin 7
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]
	*pPinEPullUp |= 1 << 18;		// Pin 9
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	601a      	str	r2, [r3, #0]
	*pPinEPullUp |= 1 << 22;		// Pin 11
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	601a      	str	r2, [r3, #0]
	*pPinEPullUp |= 1 << 26;		// Pin 13
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	601a      	str	r2, [r3, #0]

	while(1) {
		// Make all ROWS high
		*pPinBOutReg |= 1 << 15; // R1
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	601a      	str	r2, [r3, #0]
		*pPinBOutReg |= 1 << 13; // R2
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	601a      	str	r2, [r3, #0]
		*pPinBOutReg |= 1 << 11; // R3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	601a      	str	r2, [r3, #0]
		*pPinEOutReg |= 1 << 15; // R4
 80002ec:	693b      	ldr	r3, [r7, #16]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80002f4:	693b      	ldr	r3, [r7, #16]
 80002f6:	601a      	str	r2, [r3, #0]

		// Make ROW1 LOW and read button press for COLUMN 1
		*pPinBOutReg &= ~(1 << 15);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	601a      	str	r2, [r3, #0]

		if((*pPinEInReg & (1 << 13)) == 0) {
 8000304:	697b      	ldr	r3, [r7, #20]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800030c:	2b00      	cmp	r3, #0
 800030e:	d104      	bne.n	800031a <main+0x152>
			delay();
 8000310:	f000 f936 	bl	8000580 <delay>
			printf("1\n");
 8000314:	4853      	ldr	r0, [pc, #332]	; (8000464 <main+0x29c>)
 8000316:	f000 fb4f 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 11)) == 0) {
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000322:	2b00      	cmp	r3, #0
 8000324:	d104      	bne.n	8000330 <main+0x168>
			delay();
 8000326:	f000 f92b 	bl	8000580 <delay>
			printf("2\n");
 800032a:	484f      	ldr	r0, [pc, #316]	; (8000468 <main+0x2a0>)
 800032c:	f000 fb44 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 9)) == 0) {
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000338:	2b00      	cmp	r3, #0
 800033a:	d104      	bne.n	8000346 <main+0x17e>
			delay();
 800033c:	f000 f920 	bl	8000580 <delay>
			printf("3\n");
 8000340:	484a      	ldr	r0, [pc, #296]	; (800046c <main+0x2a4>)
 8000342:	f000 fb39 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 7)) == 0) {
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800034e:	2b00      	cmp	r3, #0
 8000350:	d104      	bne.n	800035c <main+0x194>
			delay();
 8000352:	f000 f915 	bl	8000580 <delay>
			printf("A\n");
 8000356:	4846      	ldr	r0, [pc, #280]	; (8000470 <main+0x2a8>)
 8000358:	f000 fb2e 	bl	80009b8 <puts>
		}

		// Make all ROWS high
		*pPinBOutReg |= 1 << 15; // R1
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	601a      	str	r2, [r3, #0]
		*pPinBOutReg |= 1 << 13; // R2
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	601a      	str	r2, [r3, #0]
		*pPinBOutReg |= 1 << 11; // R3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	601a      	str	r2, [r3, #0]
		*pPinEOutReg |= 1 << 15; // R4
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	601a      	str	r2, [r3, #0]

		// Make ROW2 LOW and read button press for COLUMN 2
		*pPinBOutReg &= ~(1 << 13);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	601a      	str	r2, [r3, #0]

		if((*pPinEInReg & (1 << 13)) == 0) {
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d104      	bne.n	80003ae <main+0x1e6>
			delay();
 80003a4:	f000 f8ec 	bl	8000580 <delay>
			printf("4\n");
 80003a8:	4832      	ldr	r0, [pc, #200]	; (8000474 <main+0x2ac>)
 80003aa:	f000 fb05 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 11)) == 0) {
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d104      	bne.n	80003c4 <main+0x1fc>
			delay();
 80003ba:	f000 f8e1 	bl	8000580 <delay>
			printf("5\n");
 80003be:	482e      	ldr	r0, [pc, #184]	; (8000478 <main+0x2b0>)
 80003c0:	f000 fafa 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 9)) == 0) {
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d104      	bne.n	80003da <main+0x212>
			delay();
 80003d0:	f000 f8d6 	bl	8000580 <delay>
			printf("6\n");
 80003d4:	4829      	ldr	r0, [pc, #164]	; (800047c <main+0x2b4>)
 80003d6:	f000 faef 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 7)) == 0) {
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d104      	bne.n	80003f0 <main+0x228>
			delay();
 80003e6:	f000 f8cb 	bl	8000580 <delay>
			printf("B\n");
 80003ea:	4825      	ldr	r0, [pc, #148]	; (8000480 <main+0x2b8>)
 80003ec:	f000 fae4 	bl	80009b8 <puts>
		}

		// Make all ROWS high
		*pPinBOutReg |= 1 << 15; // R1
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	601a      	str	r2, [r3, #0]
		*pPinBOutReg |= 1 << 13; // R2
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	601a      	str	r2, [r3, #0]
		*pPinBOutReg |= 1 << 11; // R3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	601a      	str	r2, [r3, #0]
		*pPinEOutReg |= 1 << 15; // R4
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	601a      	str	r2, [r3, #0]

		// Make ROW3 LOW and read button press for COLUMN 3
		*pPinBOutReg &= ~(1 << 11);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	601a      	str	r2, [r3, #0]

		if((*pPinEInReg & (1 << 13)) == 0) {
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000434:	2b00      	cmp	r3, #0
 8000436:	d127      	bne.n	8000488 <main+0x2c0>
			delay();
 8000438:	f000 f8a2 	bl	8000580 <delay>
			printf("7\n");
 800043c:	4811      	ldr	r0, [pc, #68]	; (8000484 <main+0x2bc>)
 800043e:	f000 fabb 	bl	80009b8 <puts>
 8000442:	e021      	b.n	8000488 <main+0x2c0>
 8000444:	080010f0 	.word	0x080010f0
 8000448:	40023830 	.word	0x40023830
 800044c:	40021000 	.word	0x40021000
 8000450:	40021010 	.word	0x40021010
 8000454:	40021014 	.word	0x40021014
 8000458:	4002100c 	.word	0x4002100c
 800045c:	40020400 	.word	0x40020400
 8000460:	40020414 	.word	0x40020414
 8000464:	080010fc 	.word	0x080010fc
 8000468:	08001100 	.word	0x08001100
 800046c:	08001104 	.word	0x08001104
 8000470:	08001108 	.word	0x08001108
 8000474:	0800110c 	.word	0x0800110c
 8000478:	08001110 	.word	0x08001110
 800047c:	08001114 	.word	0x08001114
 8000480:	08001118 	.word	0x08001118
 8000484:	0800111c 	.word	0x0800111c
		}

		if((*pPinEInReg & (1 << 11)) == 0) {
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000490:	2b00      	cmp	r3, #0
 8000492:	d104      	bne.n	800049e <main+0x2d6>
			delay();
 8000494:	f000 f874 	bl	8000580 <delay>
			printf("8\n");
 8000498:	4832      	ldr	r0, [pc, #200]	; (8000564 <main+0x39c>)
 800049a:	f000 fa8d 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 9)) == 0) {
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d104      	bne.n	80004b4 <main+0x2ec>
			delay();
 80004aa:	f000 f869 	bl	8000580 <delay>
			printf("9\n");
 80004ae:	482e      	ldr	r0, [pc, #184]	; (8000568 <main+0x3a0>)
 80004b0:	f000 fa82 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 7)) == 0) {
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d104      	bne.n	80004ca <main+0x302>
			delay();
 80004c0:	f000 f85e 	bl	8000580 <delay>
			printf("C\n");
 80004c4:	4829      	ldr	r0, [pc, #164]	; (800056c <main+0x3a4>)
 80004c6:	f000 fa77 	bl	80009b8 <puts>
		}

		// Make all ROWS high
		*pPinBOutReg |= 1 << 15; // R1
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	601a      	str	r2, [r3, #0]
		*pPinBOutReg |= 1 << 13; // R2
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	601a      	str	r2, [r3, #0]
		*pPinBOutReg |= 1 << 11; // R3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	601a      	str	r2, [r3, #0]
		*pPinEOutReg |= 1 << 15; // R4
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	601a      	str	r2, [r3, #0]

		// Make ROW4 LOW and read button press for COLUMN 4
		*pPinEOutReg &= ~(1 << 15);
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	601a      	str	r2, [r3, #0]

		if((*pPinEInReg & (1 << 13)) == 0) {
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800050e:	2b00      	cmp	r3, #0
 8000510:	d104      	bne.n	800051c <main+0x354>
			delay();
 8000512:	f000 f835 	bl	8000580 <delay>
			printf("*\n");
 8000516:	4816      	ldr	r0, [pc, #88]	; (8000570 <main+0x3a8>)
 8000518:	f000 fa4e 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 11)) == 0) {
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000524:	2b00      	cmp	r3, #0
 8000526:	d104      	bne.n	8000532 <main+0x36a>
			delay();
 8000528:	f000 f82a 	bl	8000580 <delay>
			printf("0\n");
 800052c:	4811      	ldr	r0, [pc, #68]	; (8000574 <main+0x3ac>)
 800052e:	f000 fa43 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 9)) == 0) {
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800053a:	2b00      	cmp	r3, #0
 800053c:	d104      	bne.n	8000548 <main+0x380>
			delay();
 800053e:	f000 f81f 	bl	8000580 <delay>
			printf("#\n");
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <main+0x3b0>)
 8000544:	f000 fa38 	bl	80009b8 <puts>
		}

		if((*pPinEInReg & (1 << 7)) == 0) {
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000550:	2b00      	cmp	r3, #0
 8000552:	f47f aeb9 	bne.w	80002c8 <main+0x100>
			delay();
 8000556:	f000 f813 	bl	8000580 <delay>
			printf("D\n");
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <main+0x3b4>)
 800055c:	f000 fa2c 	bl	80009b8 <puts>
		*pPinBOutReg |= 1 << 15; // R1
 8000560:	e6b2      	b.n	80002c8 <main+0x100>
 8000562:	bf00      	nop
 8000564:	08001120 	.word	0x08001120
 8000568:	08001124 	.word	0x08001124
 800056c:	08001128 	.word	0x08001128
 8000570:	0800112c 	.word	0x0800112c
 8000574:	08001130 	.word	0x08001130
 8000578:	08001134 	.word	0x08001134
 800057c:	08001138 	.word	0x08001138

08000580 <delay>:
			}
		}
	}
}

void delay(void) {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i <= 300000; i++);	//delay
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	e002      	b.n	8000592 <delay+0x12>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3301      	adds	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <delay+0x28>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d9f8      	bls.n	800058c <delay+0xc>
}
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	000493e0 	.word	0x000493e0

080005ac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <ITM_SendChar+0x44>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <ITM_SendChar+0x44>)
 80005bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005c0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <ITM_SendChar+0x48>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <ITM_SendChar+0x48>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005ce:	bf00      	nop
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f8      	beq.n	80005d0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	6013      	str	r3, [r2, #0]
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	e000edfc 	.word	0xe000edfc
 80005f4:	e0000e00 	.word	0xe0000e00

080005f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	e00a      	b.n	8000620 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800060a:	f3af 8000 	nop.w
 800060e:	4601      	mov	r1, r0
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	60ba      	str	r2, [r7, #8]
 8000616:	b2ca      	uxtb	r2, r1
 8000618:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	3301      	adds	r3, #1
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	429a      	cmp	r2, r3
 8000626:	dbf0      	blt.n	800060a <_read+0x12>
  }

  return len;
 8000628:	687b      	ldr	r3, [r7, #4]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b086      	sub	sp, #24
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e009      	b.n	8000658 <_write+0x26>
  {
    // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffad 	bl	80005ac <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbf1      	blt.n	8000644 <_write+0x12>
  }
  return len;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_close>:

int _close(int file)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000690:	605a      	str	r2, [r3, #4]
  return 0;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <_isatty>:

int _isatty(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
	...

080006cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <_sbrk+0x5c>)
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <_sbrk+0x60>)
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <_sbrk+0x64>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <_sbrk+0x68>)
 80006ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d207      	bcs.n	800070c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006fc:	f000 f96c 	bl	80009d8 <__errno>
 8000700:	4603      	mov	r3, r0
 8000702:	220c      	movs	r2, #12
 8000704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800070a:	e009      	b.n	8000720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <_sbrk+0x64>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <_sbrk+0x64>)
 800071c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071e:	68fb      	ldr	r3, [r7, #12]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20020000 	.word	0x20020000
 800072c:	00000400 	.word	0x00000400
 8000730:	20000078 	.word	0x20000078
 8000734:	200001c8 	.word	0x200001c8

08000738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800073c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 8000742:	490d      	ldr	r1, [pc, #52]	; (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <LoopForever+0xe>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000758:	4c0a      	ldr	r4, [pc, #40]	; (8000784 <LoopForever+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000766:	f000 f93d 	bl	80009e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fd2d 	bl	80001c8 <main>

0800076e <LoopForever>:

LoopForever:
  b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   r0, =_estack
 8000770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800077c:	08001144 	.word	0x08001144
  ldr r2, =_sbss
 8000780:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000784:	200001c8 	.word	0x200001c8

08000788 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC_IRQHandler>
	...

0800078c <std>:
 800078c:	2300      	movs	r3, #0
 800078e:	b510      	push	{r4, lr}
 8000790:	4604      	mov	r4, r0
 8000792:	e9c0 3300 	strd	r3, r3, [r0]
 8000796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800079a:	6083      	str	r3, [r0, #8]
 800079c:	8181      	strh	r1, [r0, #12]
 800079e:	6643      	str	r3, [r0, #100]	; 0x64
 80007a0:	81c2      	strh	r2, [r0, #14]
 80007a2:	6183      	str	r3, [r0, #24]
 80007a4:	4619      	mov	r1, r3
 80007a6:	2208      	movs	r2, #8
 80007a8:	305c      	adds	r0, #92	; 0x5c
 80007aa:	f000 f90d 	bl	80009c8 <memset>
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <std+0x58>)
 80007b0:	6263      	str	r3, [r4, #36]	; 0x24
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <std+0x5c>)
 80007b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <std+0x60>)
 80007b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <std+0x64>)
 80007bc:	6323      	str	r3, [r4, #48]	; 0x30
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <std+0x68>)
 80007c0:	6224      	str	r4, [r4, #32]
 80007c2:	429c      	cmp	r4, r3
 80007c4:	d006      	beq.n	80007d4 <std+0x48>
 80007c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80007ca:	4294      	cmp	r4, r2
 80007cc:	d002      	beq.n	80007d4 <std+0x48>
 80007ce:	33d0      	adds	r3, #208	; 0xd0
 80007d0:	429c      	cmp	r4, r3
 80007d2:	d105      	bne.n	80007e0 <std+0x54>
 80007d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007dc:	f000 b926 	b.w	8000a2c <__retarget_lock_init_recursive>
 80007e0:	bd10      	pop	{r4, pc}
 80007e2:	bf00      	nop
 80007e4:	08000ce1 	.word	0x08000ce1
 80007e8:	08000d03 	.word	0x08000d03
 80007ec:	08000d3b 	.word	0x08000d3b
 80007f0:	08000d5f 	.word	0x08000d5f
 80007f4:	2000007c 	.word	0x2000007c

080007f8 <stdio_exit_handler>:
 80007f8:	4a02      	ldr	r2, [pc, #8]	; (8000804 <stdio_exit_handler+0xc>)
 80007fa:	4903      	ldr	r1, [pc, #12]	; (8000808 <stdio_exit_handler+0x10>)
 80007fc:	4803      	ldr	r0, [pc, #12]	; (800080c <stdio_exit_handler+0x14>)
 80007fe:	f000 b869 	b.w	80008d4 <_fwalk_sglue>
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000
 8000808:	08000c79 	.word	0x08000c79
 800080c:	2000000c 	.word	0x2000000c

08000810 <cleanup_stdio>:
 8000810:	6841      	ldr	r1, [r0, #4]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <cleanup_stdio+0x34>)
 8000814:	4299      	cmp	r1, r3
 8000816:	b510      	push	{r4, lr}
 8000818:	4604      	mov	r4, r0
 800081a:	d001      	beq.n	8000820 <cleanup_stdio+0x10>
 800081c:	f000 fa2c 	bl	8000c78 <_fflush_r>
 8000820:	68a1      	ldr	r1, [r4, #8]
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <cleanup_stdio+0x38>)
 8000824:	4299      	cmp	r1, r3
 8000826:	d002      	beq.n	800082e <cleanup_stdio+0x1e>
 8000828:	4620      	mov	r0, r4
 800082a:	f000 fa25 	bl	8000c78 <_fflush_r>
 800082e:	68e1      	ldr	r1, [r4, #12]
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <cleanup_stdio+0x3c>)
 8000832:	4299      	cmp	r1, r3
 8000834:	d004      	beq.n	8000840 <cleanup_stdio+0x30>
 8000836:	4620      	mov	r0, r4
 8000838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800083c:	f000 ba1c 	b.w	8000c78 <_fflush_r>
 8000840:	bd10      	pop	{r4, pc}
 8000842:	bf00      	nop
 8000844:	2000007c 	.word	0x2000007c
 8000848:	200000e4 	.word	0x200000e4
 800084c:	2000014c 	.word	0x2000014c

08000850 <global_stdio_init.part.0>:
 8000850:	b510      	push	{r4, lr}
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <global_stdio_init.part.0+0x30>)
 8000854:	4c0b      	ldr	r4, [pc, #44]	; (8000884 <global_stdio_init.part.0+0x34>)
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <global_stdio_init.part.0+0x38>)
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	4620      	mov	r0, r4
 800085c:	2200      	movs	r2, #0
 800085e:	2104      	movs	r1, #4
 8000860:	f7ff ff94 	bl	800078c <std>
 8000864:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000868:	2201      	movs	r2, #1
 800086a:	2109      	movs	r1, #9
 800086c:	f7ff ff8e 	bl	800078c <std>
 8000870:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000874:	2202      	movs	r2, #2
 8000876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800087a:	2112      	movs	r1, #18
 800087c:	f7ff bf86 	b.w	800078c <std>
 8000880:	200001b4 	.word	0x200001b4
 8000884:	2000007c 	.word	0x2000007c
 8000888:	080007f9 	.word	0x080007f9

0800088c <__sfp_lock_acquire>:
 800088c:	4801      	ldr	r0, [pc, #4]	; (8000894 <__sfp_lock_acquire+0x8>)
 800088e:	f000 b8ce 	b.w	8000a2e <__retarget_lock_acquire_recursive>
 8000892:	bf00      	nop
 8000894:	200001b9 	.word	0x200001b9

08000898 <__sfp_lock_release>:
 8000898:	4801      	ldr	r0, [pc, #4]	; (80008a0 <__sfp_lock_release+0x8>)
 800089a:	f000 b8c9 	b.w	8000a30 <__retarget_lock_release_recursive>
 800089e:	bf00      	nop
 80008a0:	200001b9 	.word	0x200001b9

080008a4 <__sinit>:
 80008a4:	b510      	push	{r4, lr}
 80008a6:	4604      	mov	r4, r0
 80008a8:	f7ff fff0 	bl	800088c <__sfp_lock_acquire>
 80008ac:	6a23      	ldr	r3, [r4, #32]
 80008ae:	b11b      	cbz	r3, 80008b8 <__sinit+0x14>
 80008b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008b4:	f7ff bff0 	b.w	8000898 <__sfp_lock_release>
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__sinit+0x28>)
 80008ba:	6223      	str	r3, [r4, #32]
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__sinit+0x2c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f5      	bne.n	80008b0 <__sinit+0xc>
 80008c4:	f7ff ffc4 	bl	8000850 <global_stdio_init.part.0>
 80008c8:	e7f2      	b.n	80008b0 <__sinit+0xc>
 80008ca:	bf00      	nop
 80008cc:	08000811 	.word	0x08000811
 80008d0:	200001b4 	.word	0x200001b4

080008d4 <_fwalk_sglue>:
 80008d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008d8:	4607      	mov	r7, r0
 80008da:	4688      	mov	r8, r1
 80008dc:	4614      	mov	r4, r2
 80008de:	2600      	movs	r6, #0
 80008e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008e4:	f1b9 0901 	subs.w	r9, r9, #1
 80008e8:	d505      	bpl.n	80008f6 <_fwalk_sglue+0x22>
 80008ea:	6824      	ldr	r4, [r4, #0]
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d1f7      	bne.n	80008e0 <_fwalk_sglue+0xc>
 80008f0:	4630      	mov	r0, r6
 80008f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008f6:	89ab      	ldrh	r3, [r5, #12]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d907      	bls.n	800090c <_fwalk_sglue+0x38>
 80008fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000900:	3301      	adds	r3, #1
 8000902:	d003      	beq.n	800090c <_fwalk_sglue+0x38>
 8000904:	4629      	mov	r1, r5
 8000906:	4638      	mov	r0, r7
 8000908:	47c0      	blx	r8
 800090a:	4306      	orrs	r6, r0
 800090c:	3568      	adds	r5, #104	; 0x68
 800090e:	e7e9      	b.n	80008e4 <_fwalk_sglue+0x10>

08000910 <_puts_r>:
 8000910:	6a03      	ldr	r3, [r0, #32]
 8000912:	b570      	push	{r4, r5, r6, lr}
 8000914:	6884      	ldr	r4, [r0, #8]
 8000916:	4605      	mov	r5, r0
 8000918:	460e      	mov	r6, r1
 800091a:	b90b      	cbnz	r3, 8000920 <_puts_r+0x10>
 800091c:	f7ff ffc2 	bl	80008a4 <__sinit>
 8000920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000922:	07db      	lsls	r3, r3, #31
 8000924:	d405      	bmi.n	8000932 <_puts_r+0x22>
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	0598      	lsls	r0, r3, #22
 800092a:	d402      	bmi.n	8000932 <_puts_r+0x22>
 800092c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800092e:	f000 f87e 	bl	8000a2e <__retarget_lock_acquire_recursive>
 8000932:	89a3      	ldrh	r3, [r4, #12]
 8000934:	0719      	lsls	r1, r3, #28
 8000936:	d513      	bpl.n	8000960 <_puts_r+0x50>
 8000938:	6923      	ldr	r3, [r4, #16]
 800093a:	b18b      	cbz	r3, 8000960 <_puts_r+0x50>
 800093c:	3e01      	subs	r6, #1
 800093e:	68a3      	ldr	r3, [r4, #8]
 8000940:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000944:	3b01      	subs	r3, #1
 8000946:	60a3      	str	r3, [r4, #8]
 8000948:	b9e9      	cbnz	r1, 8000986 <_puts_r+0x76>
 800094a:	2b00      	cmp	r3, #0
 800094c:	da2e      	bge.n	80009ac <_puts_r+0x9c>
 800094e:	4622      	mov	r2, r4
 8000950:	210a      	movs	r1, #10
 8000952:	4628      	mov	r0, r5
 8000954:	f000 fa07 	bl	8000d66 <__swbuf_r>
 8000958:	3001      	adds	r0, #1
 800095a:	d007      	beq.n	800096c <_puts_r+0x5c>
 800095c:	250a      	movs	r5, #10
 800095e:	e007      	b.n	8000970 <_puts_r+0x60>
 8000960:	4621      	mov	r1, r4
 8000962:	4628      	mov	r0, r5
 8000964:	f000 fa3c 	bl	8000de0 <__swsetup_r>
 8000968:	2800      	cmp	r0, #0
 800096a:	d0e7      	beq.n	800093c <_puts_r+0x2c>
 800096c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000972:	07da      	lsls	r2, r3, #31
 8000974:	d405      	bmi.n	8000982 <_puts_r+0x72>
 8000976:	89a3      	ldrh	r3, [r4, #12]
 8000978:	059b      	lsls	r3, r3, #22
 800097a:	d402      	bmi.n	8000982 <_puts_r+0x72>
 800097c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800097e:	f000 f857 	bl	8000a30 <__retarget_lock_release_recursive>
 8000982:	4628      	mov	r0, r5
 8000984:	bd70      	pop	{r4, r5, r6, pc}
 8000986:	2b00      	cmp	r3, #0
 8000988:	da04      	bge.n	8000994 <_puts_r+0x84>
 800098a:	69a2      	ldr	r2, [r4, #24]
 800098c:	429a      	cmp	r2, r3
 800098e:	dc06      	bgt.n	800099e <_puts_r+0x8e>
 8000990:	290a      	cmp	r1, #10
 8000992:	d004      	beq.n	800099e <_puts_r+0x8e>
 8000994:	6823      	ldr	r3, [r4, #0]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	6022      	str	r2, [r4, #0]
 800099a:	7019      	strb	r1, [r3, #0]
 800099c:	e7cf      	b.n	800093e <_puts_r+0x2e>
 800099e:	4622      	mov	r2, r4
 80009a0:	4628      	mov	r0, r5
 80009a2:	f000 f9e0 	bl	8000d66 <__swbuf_r>
 80009a6:	3001      	adds	r0, #1
 80009a8:	d1c9      	bne.n	800093e <_puts_r+0x2e>
 80009aa:	e7df      	b.n	800096c <_puts_r+0x5c>
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	250a      	movs	r5, #10
 80009b0:	1c5a      	adds	r2, r3, #1
 80009b2:	6022      	str	r2, [r4, #0]
 80009b4:	701d      	strb	r5, [r3, #0]
 80009b6:	e7db      	b.n	8000970 <_puts_r+0x60>

080009b8 <puts>:
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <puts+0xc>)
 80009ba:	4601      	mov	r1, r0
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	f7ff bfa7 	b.w	8000910 <_puts_r>
 80009c2:	bf00      	nop
 80009c4:	20000058 	.word	0x20000058

080009c8 <memset>:
 80009c8:	4402      	add	r2, r0
 80009ca:	4603      	mov	r3, r0
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d100      	bne.n	80009d2 <memset+0xa>
 80009d0:	4770      	bx	lr
 80009d2:	f803 1b01 	strb.w	r1, [r3], #1
 80009d6:	e7f9      	b.n	80009cc <memset+0x4>

080009d8 <__errno>:
 80009d8:	4b01      	ldr	r3, [pc, #4]	; (80009e0 <__errno+0x8>)
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000058 	.word	0x20000058

080009e4 <__libc_init_array>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	4d0d      	ldr	r5, [pc, #52]	; (8000a1c <__libc_init_array+0x38>)
 80009e8:	4c0d      	ldr	r4, [pc, #52]	; (8000a20 <__libc_init_array+0x3c>)
 80009ea:	1b64      	subs	r4, r4, r5
 80009ec:	10a4      	asrs	r4, r4, #2
 80009ee:	2600      	movs	r6, #0
 80009f0:	42a6      	cmp	r6, r4
 80009f2:	d109      	bne.n	8000a08 <__libc_init_array+0x24>
 80009f4:	4d0b      	ldr	r5, [pc, #44]	; (8000a24 <__libc_init_array+0x40>)
 80009f6:	4c0c      	ldr	r4, [pc, #48]	; (8000a28 <__libc_init_array+0x44>)
 80009f8:	f000 fb6e 	bl	80010d8 <_init>
 80009fc:	1b64      	subs	r4, r4, r5
 80009fe:	10a4      	asrs	r4, r4, #2
 8000a00:	2600      	movs	r6, #0
 8000a02:	42a6      	cmp	r6, r4
 8000a04:	d105      	bne.n	8000a12 <__libc_init_array+0x2e>
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0c:	4798      	blx	r3
 8000a0e:	3601      	adds	r6, #1
 8000a10:	e7ee      	b.n	80009f0 <__libc_init_array+0xc>
 8000a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a16:	4798      	blx	r3
 8000a18:	3601      	adds	r6, #1
 8000a1a:	e7f2      	b.n	8000a02 <__libc_init_array+0x1e>
 8000a1c:	0800113c 	.word	0x0800113c
 8000a20:	0800113c 	.word	0x0800113c
 8000a24:	0800113c 	.word	0x0800113c
 8000a28:	08001140 	.word	0x08001140

08000a2c <__retarget_lock_init_recursive>:
 8000a2c:	4770      	bx	lr

08000a2e <__retarget_lock_acquire_recursive>:
 8000a2e:	4770      	bx	lr

08000a30 <__retarget_lock_release_recursive>:
 8000a30:	4770      	bx	lr
	...

08000a34 <sbrk_aligned>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	4e0e      	ldr	r6, [pc, #56]	; (8000a70 <sbrk_aligned+0x3c>)
 8000a38:	460c      	mov	r4, r1
 8000a3a:	6831      	ldr	r1, [r6, #0]
 8000a3c:	4605      	mov	r5, r0
 8000a3e:	b911      	cbnz	r1, 8000a46 <sbrk_aligned+0x12>
 8000a40:	f000 fade 	bl	8001000 <_sbrk_r>
 8000a44:	6030      	str	r0, [r6, #0]
 8000a46:	4621      	mov	r1, r4
 8000a48:	4628      	mov	r0, r5
 8000a4a:	f000 fad9 	bl	8001000 <_sbrk_r>
 8000a4e:	1c43      	adds	r3, r0, #1
 8000a50:	d00a      	beq.n	8000a68 <sbrk_aligned+0x34>
 8000a52:	1cc4      	adds	r4, r0, #3
 8000a54:	f024 0403 	bic.w	r4, r4, #3
 8000a58:	42a0      	cmp	r0, r4
 8000a5a:	d007      	beq.n	8000a6c <sbrk_aligned+0x38>
 8000a5c:	1a21      	subs	r1, r4, r0
 8000a5e:	4628      	mov	r0, r5
 8000a60:	f000 face 	bl	8001000 <_sbrk_r>
 8000a64:	3001      	adds	r0, #1
 8000a66:	d101      	bne.n	8000a6c <sbrk_aligned+0x38>
 8000a68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	200001c0 	.word	0x200001c0

08000a74 <_malloc_r>:
 8000a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a78:	1ccd      	adds	r5, r1, #3
 8000a7a:	f025 0503 	bic.w	r5, r5, #3
 8000a7e:	3508      	adds	r5, #8
 8000a80:	2d0c      	cmp	r5, #12
 8000a82:	bf38      	it	cc
 8000a84:	250c      	movcc	r5, #12
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	4607      	mov	r7, r0
 8000a8a:	db01      	blt.n	8000a90 <_malloc_r+0x1c>
 8000a8c:	42a9      	cmp	r1, r5
 8000a8e:	d905      	bls.n	8000a9c <_malloc_r+0x28>
 8000a90:	230c      	movs	r3, #12
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	2600      	movs	r6, #0
 8000a96:	4630      	mov	r0, r6
 8000a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b70 <_malloc_r+0xfc>
 8000aa0:	f000 f912 	bl	8000cc8 <__malloc_lock>
 8000aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8000aa8:	461c      	mov	r4, r3
 8000aaa:	bb5c      	cbnz	r4, 8000b04 <_malloc_r+0x90>
 8000aac:	4629      	mov	r1, r5
 8000aae:	4638      	mov	r0, r7
 8000ab0:	f7ff ffc0 	bl	8000a34 <sbrk_aligned>
 8000ab4:	1c43      	adds	r3, r0, #1
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	d155      	bne.n	8000b66 <_malloc_r+0xf2>
 8000aba:	f8d8 4000 	ldr.w	r4, [r8]
 8000abe:	4626      	mov	r6, r4
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d145      	bne.n	8000b50 <_malloc_r+0xdc>
 8000ac4:	2c00      	cmp	r4, #0
 8000ac6:	d048      	beq.n	8000b5a <_malloc_r+0xe6>
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	4631      	mov	r1, r6
 8000acc:	4638      	mov	r0, r7
 8000ace:	eb04 0903 	add.w	r9, r4, r3
 8000ad2:	f000 fa95 	bl	8001000 <_sbrk_r>
 8000ad6:	4581      	cmp	r9, r0
 8000ad8:	d13f      	bne.n	8000b5a <_malloc_r+0xe6>
 8000ada:	6821      	ldr	r1, [r4, #0]
 8000adc:	1a6d      	subs	r5, r5, r1
 8000ade:	4629      	mov	r1, r5
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	f7ff ffa7 	bl	8000a34 <sbrk_aligned>
 8000ae6:	3001      	adds	r0, #1
 8000ae8:	d037      	beq.n	8000b5a <_malloc_r+0xe6>
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	442b      	add	r3, r5
 8000aee:	6023      	str	r3, [r4, #0]
 8000af0:	f8d8 3000 	ldr.w	r3, [r8]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d038      	beq.n	8000b6a <_malloc_r+0xf6>
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	42a2      	cmp	r2, r4
 8000afc:	d12b      	bne.n	8000b56 <_malloc_r+0xe2>
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	e00f      	b.n	8000b24 <_malloc_r+0xb0>
 8000b04:	6822      	ldr	r2, [r4, #0]
 8000b06:	1b52      	subs	r2, r2, r5
 8000b08:	d41f      	bmi.n	8000b4a <_malloc_r+0xd6>
 8000b0a:	2a0b      	cmp	r2, #11
 8000b0c:	d917      	bls.n	8000b3e <_malloc_r+0xca>
 8000b0e:	1961      	adds	r1, r4, r5
 8000b10:	42a3      	cmp	r3, r4
 8000b12:	6025      	str	r5, [r4, #0]
 8000b14:	bf18      	it	ne
 8000b16:	6059      	strne	r1, [r3, #4]
 8000b18:	6863      	ldr	r3, [r4, #4]
 8000b1a:	bf08      	it	eq
 8000b1c:	f8c8 1000 	streq.w	r1, [r8]
 8000b20:	5162      	str	r2, [r4, r5]
 8000b22:	604b      	str	r3, [r1, #4]
 8000b24:	4638      	mov	r0, r7
 8000b26:	f104 060b 	add.w	r6, r4, #11
 8000b2a:	f000 f8d3 	bl	8000cd4 <__malloc_unlock>
 8000b2e:	f026 0607 	bic.w	r6, r6, #7
 8000b32:	1d23      	adds	r3, r4, #4
 8000b34:	1af2      	subs	r2, r6, r3
 8000b36:	d0ae      	beq.n	8000a96 <_malloc_r+0x22>
 8000b38:	1b9b      	subs	r3, r3, r6
 8000b3a:	50a3      	str	r3, [r4, r2]
 8000b3c:	e7ab      	b.n	8000a96 <_malloc_r+0x22>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	6862      	ldr	r2, [r4, #4]
 8000b42:	d1dd      	bne.n	8000b00 <_malloc_r+0x8c>
 8000b44:	f8c8 2000 	str.w	r2, [r8]
 8000b48:	e7ec      	b.n	8000b24 <_malloc_r+0xb0>
 8000b4a:	4623      	mov	r3, r4
 8000b4c:	6864      	ldr	r4, [r4, #4]
 8000b4e:	e7ac      	b.n	8000aaa <_malloc_r+0x36>
 8000b50:	4634      	mov	r4, r6
 8000b52:	6876      	ldr	r6, [r6, #4]
 8000b54:	e7b4      	b.n	8000ac0 <_malloc_r+0x4c>
 8000b56:	4613      	mov	r3, r2
 8000b58:	e7cc      	b.n	8000af4 <_malloc_r+0x80>
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4638      	mov	r0, r7
 8000b60:	f000 f8b8 	bl	8000cd4 <__malloc_unlock>
 8000b64:	e797      	b.n	8000a96 <_malloc_r+0x22>
 8000b66:	6025      	str	r5, [r4, #0]
 8000b68:	e7dc      	b.n	8000b24 <_malloc_r+0xb0>
 8000b6a:	605b      	str	r3, [r3, #4]
 8000b6c:	deff      	udf	#255	; 0xff
 8000b6e:	bf00      	nop
 8000b70:	200001bc 	.word	0x200001bc

08000b74 <__sflush_r>:
 8000b74:	898a      	ldrh	r2, [r1, #12]
 8000b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b78:	4605      	mov	r5, r0
 8000b7a:	0710      	lsls	r0, r2, #28
 8000b7c:	460c      	mov	r4, r1
 8000b7e:	d457      	bmi.n	8000c30 <__sflush_r+0xbc>
 8000b80:	684b      	ldr	r3, [r1, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	dc04      	bgt.n	8000b90 <__sflush_r+0x1c>
 8000b86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dc01      	bgt.n	8000b90 <__sflush_r+0x1c>
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d0fa      	beq.n	8000b8c <__sflush_r+0x18>
 8000b96:	2300      	movs	r3, #0
 8000b98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b9c:	682f      	ldr	r7, [r5, #0]
 8000b9e:	6a21      	ldr	r1, [r4, #32]
 8000ba0:	602b      	str	r3, [r5, #0]
 8000ba2:	d032      	beq.n	8000c0a <__sflush_r+0x96>
 8000ba4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ba6:	89a3      	ldrh	r3, [r4, #12]
 8000ba8:	075a      	lsls	r2, r3, #29
 8000baa:	d505      	bpl.n	8000bb8 <__sflush_r+0x44>
 8000bac:	6863      	ldr	r3, [r4, #4]
 8000bae:	1ac0      	subs	r0, r0, r3
 8000bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bb2:	b10b      	cbz	r3, 8000bb8 <__sflush_r+0x44>
 8000bb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bb6:	1ac0      	subs	r0, r0, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	4602      	mov	r2, r0
 8000bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bbe:	6a21      	ldr	r1, [r4, #32]
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	47b0      	blx	r6
 8000bc4:	1c43      	adds	r3, r0, #1
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	d106      	bne.n	8000bd8 <__sflush_r+0x64>
 8000bca:	6829      	ldr	r1, [r5, #0]
 8000bcc:	291d      	cmp	r1, #29
 8000bce:	d82b      	bhi.n	8000c28 <__sflush_r+0xb4>
 8000bd0:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <__sflush_r+0x100>)
 8000bd2:	410a      	asrs	r2, r1
 8000bd4:	07d6      	lsls	r6, r2, #31
 8000bd6:	d427      	bmi.n	8000c28 <__sflush_r+0xb4>
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6062      	str	r2, [r4, #4]
 8000bdc:	04d9      	lsls	r1, r3, #19
 8000bde:	6922      	ldr	r2, [r4, #16]
 8000be0:	6022      	str	r2, [r4, #0]
 8000be2:	d504      	bpl.n	8000bee <__sflush_r+0x7a>
 8000be4:	1c42      	adds	r2, r0, #1
 8000be6:	d101      	bne.n	8000bec <__sflush_r+0x78>
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	b903      	cbnz	r3, 8000bee <__sflush_r+0x7a>
 8000bec:	6560      	str	r0, [r4, #84]	; 0x54
 8000bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bf0:	602f      	str	r7, [r5, #0]
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d0ca      	beq.n	8000b8c <__sflush_r+0x18>
 8000bf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d002      	beq.n	8000c04 <__sflush_r+0x90>
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f000 fa20 	bl	8001044 <_free_r>
 8000c04:	2000      	movs	r0, #0
 8000c06:	6360      	str	r0, [r4, #52]	; 0x34
 8000c08:	e7c1      	b.n	8000b8e <__sflush_r+0x1a>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	47b0      	blx	r6
 8000c10:	1c41      	adds	r1, r0, #1
 8000c12:	d1c8      	bne.n	8000ba6 <__sflush_r+0x32>
 8000c14:	682b      	ldr	r3, [r5, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0c5      	beq.n	8000ba6 <__sflush_r+0x32>
 8000c1a:	2b1d      	cmp	r3, #29
 8000c1c:	d001      	beq.n	8000c22 <__sflush_r+0xae>
 8000c1e:	2b16      	cmp	r3, #22
 8000c20:	d101      	bne.n	8000c26 <__sflush_r+0xb2>
 8000c22:	602f      	str	r7, [r5, #0]
 8000c24:	e7b2      	b.n	8000b8c <__sflush_r+0x18>
 8000c26:	89a3      	ldrh	r3, [r4, #12]
 8000c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2c:	81a3      	strh	r3, [r4, #12]
 8000c2e:	e7ae      	b.n	8000b8e <__sflush_r+0x1a>
 8000c30:	690f      	ldr	r7, [r1, #16]
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d0aa      	beq.n	8000b8c <__sflush_r+0x18>
 8000c36:	0793      	lsls	r3, r2, #30
 8000c38:	680e      	ldr	r6, [r1, #0]
 8000c3a:	bf08      	it	eq
 8000c3c:	694b      	ldreq	r3, [r1, #20]
 8000c3e:	600f      	str	r7, [r1, #0]
 8000c40:	bf18      	it	ne
 8000c42:	2300      	movne	r3, #0
 8000c44:	1bf6      	subs	r6, r6, r7
 8000c46:	608b      	str	r3, [r1, #8]
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	dd9f      	ble.n	8000b8c <__sflush_r+0x18>
 8000c4c:	6a21      	ldr	r1, [r4, #32]
 8000c4e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000c52:	4633      	mov	r3, r6
 8000c54:	463a      	mov	r2, r7
 8000c56:	4628      	mov	r0, r5
 8000c58:	47e0      	blx	ip
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	dc06      	bgt.n	8000c6c <__sflush_r+0xf8>
 8000c5e:	89a3      	ldrh	r3, [r4, #12]
 8000c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c64:	81a3      	strh	r3, [r4, #12]
 8000c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c6a:	e790      	b.n	8000b8e <__sflush_r+0x1a>
 8000c6c:	4407      	add	r7, r0
 8000c6e:	1a36      	subs	r6, r6, r0
 8000c70:	e7ea      	b.n	8000c48 <__sflush_r+0xd4>
 8000c72:	bf00      	nop
 8000c74:	dfbffffe 	.word	0xdfbffffe

08000c78 <_fflush_r>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	690b      	ldr	r3, [r1, #16]
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	460c      	mov	r4, r1
 8000c80:	b913      	cbnz	r3, 8000c88 <_fflush_r+0x10>
 8000c82:	2500      	movs	r5, #0
 8000c84:	4628      	mov	r0, r5
 8000c86:	bd38      	pop	{r3, r4, r5, pc}
 8000c88:	b118      	cbz	r0, 8000c92 <_fflush_r+0x1a>
 8000c8a:	6a03      	ldr	r3, [r0, #32]
 8000c8c:	b90b      	cbnz	r3, 8000c92 <_fflush_r+0x1a>
 8000c8e:	f7ff fe09 	bl	80008a4 <__sinit>
 8000c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f3      	beq.n	8000c82 <_fflush_r+0xa>
 8000c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c9c:	07d0      	lsls	r0, r2, #31
 8000c9e:	d404      	bmi.n	8000caa <_fflush_r+0x32>
 8000ca0:	0599      	lsls	r1, r3, #22
 8000ca2:	d402      	bmi.n	8000caa <_fflush_r+0x32>
 8000ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ca6:	f7ff fec2 	bl	8000a2e <__retarget_lock_acquire_recursive>
 8000caa:	4628      	mov	r0, r5
 8000cac:	4621      	mov	r1, r4
 8000cae:	f7ff ff61 	bl	8000b74 <__sflush_r>
 8000cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cb4:	07da      	lsls	r2, r3, #31
 8000cb6:	4605      	mov	r5, r0
 8000cb8:	d4e4      	bmi.n	8000c84 <_fflush_r+0xc>
 8000cba:	89a3      	ldrh	r3, [r4, #12]
 8000cbc:	059b      	lsls	r3, r3, #22
 8000cbe:	d4e1      	bmi.n	8000c84 <_fflush_r+0xc>
 8000cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cc2:	f7ff feb5 	bl	8000a30 <__retarget_lock_release_recursive>
 8000cc6:	e7dd      	b.n	8000c84 <_fflush_r+0xc>

08000cc8 <__malloc_lock>:
 8000cc8:	4801      	ldr	r0, [pc, #4]	; (8000cd0 <__malloc_lock+0x8>)
 8000cca:	f7ff beb0 	b.w	8000a2e <__retarget_lock_acquire_recursive>
 8000cce:	bf00      	nop
 8000cd0:	200001b8 	.word	0x200001b8

08000cd4 <__malloc_unlock>:
 8000cd4:	4801      	ldr	r0, [pc, #4]	; (8000cdc <__malloc_unlock+0x8>)
 8000cd6:	f7ff beab 	b.w	8000a30 <__retarget_lock_release_recursive>
 8000cda:	bf00      	nop
 8000cdc:	200001b8 	.word	0x200001b8

08000ce0 <__sread>:
 8000ce0:	b510      	push	{r4, lr}
 8000ce2:	460c      	mov	r4, r1
 8000ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ce8:	f000 f978 	bl	8000fdc <_read_r>
 8000cec:	2800      	cmp	r0, #0
 8000cee:	bfab      	itete	ge
 8000cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8000cf4:	181b      	addge	r3, r3, r0
 8000cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000cfa:	bfac      	ite	ge
 8000cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000cfe:	81a3      	strhlt	r3, [r4, #12]
 8000d00:	bd10      	pop	{r4, pc}

08000d02 <__swrite>:
 8000d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d06:	461f      	mov	r7, r3
 8000d08:	898b      	ldrh	r3, [r1, #12]
 8000d0a:	05db      	lsls	r3, r3, #23
 8000d0c:	4605      	mov	r5, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	4616      	mov	r6, r2
 8000d12:	d505      	bpl.n	8000d20 <__swrite+0x1e>
 8000d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d18:	2302      	movs	r3, #2
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f000 f94c 	bl	8000fb8 <_lseek_r>
 8000d20:	89a3      	ldrh	r3, [r4, #12]
 8000d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d2a:	81a3      	strh	r3, [r4, #12]
 8000d2c:	4632      	mov	r2, r6
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4628      	mov	r0, r5
 8000d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d36:	f000 b973 	b.w	8001020 <_write_r>

08000d3a <__sseek>:
 8000d3a:	b510      	push	{r4, lr}
 8000d3c:	460c      	mov	r4, r1
 8000d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d42:	f000 f939 	bl	8000fb8 <_lseek_r>
 8000d46:	1c43      	adds	r3, r0, #1
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	bf15      	itete	ne
 8000d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d56:	81a3      	strheq	r3, [r4, #12]
 8000d58:	bf18      	it	ne
 8000d5a:	81a3      	strhne	r3, [r4, #12]
 8000d5c:	bd10      	pop	{r4, pc}

08000d5e <__sclose>:
 8000d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d62:	f000 b8f7 	b.w	8000f54 <_close_r>

08000d66 <__swbuf_r>:
 8000d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d68:	460e      	mov	r6, r1
 8000d6a:	4614      	mov	r4, r2
 8000d6c:	4605      	mov	r5, r0
 8000d6e:	b118      	cbz	r0, 8000d78 <__swbuf_r+0x12>
 8000d70:	6a03      	ldr	r3, [r0, #32]
 8000d72:	b90b      	cbnz	r3, 8000d78 <__swbuf_r+0x12>
 8000d74:	f7ff fd96 	bl	80008a4 <__sinit>
 8000d78:	69a3      	ldr	r3, [r4, #24]
 8000d7a:	60a3      	str	r3, [r4, #8]
 8000d7c:	89a3      	ldrh	r3, [r4, #12]
 8000d7e:	071a      	lsls	r2, r3, #28
 8000d80:	d525      	bpl.n	8000dce <__swbuf_r+0x68>
 8000d82:	6923      	ldr	r3, [r4, #16]
 8000d84:	b31b      	cbz	r3, 8000dce <__swbuf_r+0x68>
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	6922      	ldr	r2, [r4, #16]
 8000d8a:	1a98      	subs	r0, r3, r2
 8000d8c:	6963      	ldr	r3, [r4, #20]
 8000d8e:	b2f6      	uxtb	r6, r6
 8000d90:	4283      	cmp	r3, r0
 8000d92:	4637      	mov	r7, r6
 8000d94:	dc04      	bgt.n	8000da0 <__swbuf_r+0x3a>
 8000d96:	4621      	mov	r1, r4
 8000d98:	4628      	mov	r0, r5
 8000d9a:	f7ff ff6d 	bl	8000c78 <_fflush_r>
 8000d9e:	b9e0      	cbnz	r0, 8000dda <__swbuf_r+0x74>
 8000da0:	68a3      	ldr	r3, [r4, #8]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	60a3      	str	r3, [r4, #8]
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	6022      	str	r2, [r4, #0]
 8000dac:	701e      	strb	r6, [r3, #0]
 8000dae:	6962      	ldr	r2, [r4, #20]
 8000db0:	1c43      	adds	r3, r0, #1
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__swbuf_r+0x5a>
 8000db6:	89a3      	ldrh	r3, [r4, #12]
 8000db8:	07db      	lsls	r3, r3, #31
 8000dba:	d506      	bpl.n	8000dca <__swbuf_r+0x64>
 8000dbc:	2e0a      	cmp	r6, #10
 8000dbe:	d104      	bne.n	8000dca <__swbuf_r+0x64>
 8000dc0:	4621      	mov	r1, r4
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	f7ff ff58 	bl	8000c78 <_fflush_r>
 8000dc8:	b938      	cbnz	r0, 8000dda <__swbuf_r+0x74>
 8000dca:	4638      	mov	r0, r7
 8000dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dce:	4621      	mov	r1, r4
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	f000 f805 	bl	8000de0 <__swsetup_r>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d0d5      	beq.n	8000d86 <__swbuf_r+0x20>
 8000dda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000dde:	e7f4      	b.n	8000dca <__swbuf_r+0x64>

08000de0 <__swsetup_r>:
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <__swsetup_r+0xac>)
 8000de4:	4605      	mov	r5, r0
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	460c      	mov	r4, r1
 8000dea:	b118      	cbz	r0, 8000df4 <__swsetup_r+0x14>
 8000dec:	6a03      	ldr	r3, [r0, #32]
 8000dee:	b90b      	cbnz	r3, 8000df4 <__swsetup_r+0x14>
 8000df0:	f7ff fd58 	bl	80008a4 <__sinit>
 8000df4:	89a3      	ldrh	r3, [r4, #12]
 8000df6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000dfa:	0718      	lsls	r0, r3, #28
 8000dfc:	d422      	bmi.n	8000e44 <__swsetup_r+0x64>
 8000dfe:	06d9      	lsls	r1, r3, #27
 8000e00:	d407      	bmi.n	8000e12 <__swsetup_r+0x32>
 8000e02:	2309      	movs	r3, #9
 8000e04:	602b      	str	r3, [r5, #0]
 8000e06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000e0a:	81a3      	strh	r3, [r4, #12]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e10:	e034      	b.n	8000e7c <__swsetup_r+0x9c>
 8000e12:	0758      	lsls	r0, r3, #29
 8000e14:	d512      	bpl.n	8000e3c <__swsetup_r+0x5c>
 8000e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e18:	b141      	cbz	r1, 8000e2c <__swsetup_r+0x4c>
 8000e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d002      	beq.n	8000e28 <__swsetup_r+0x48>
 8000e22:	4628      	mov	r0, r5
 8000e24:	f000 f90e 	bl	8001044 <_free_r>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	6363      	str	r3, [r4, #52]	; 0x34
 8000e2c:	89a3      	ldrh	r3, [r4, #12]
 8000e2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e32:	81a3      	strh	r3, [r4, #12]
 8000e34:	2300      	movs	r3, #0
 8000e36:	6063      	str	r3, [r4, #4]
 8000e38:	6923      	ldr	r3, [r4, #16]
 8000e3a:	6023      	str	r3, [r4, #0]
 8000e3c:	89a3      	ldrh	r3, [r4, #12]
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	81a3      	strh	r3, [r4, #12]
 8000e44:	6923      	ldr	r3, [r4, #16]
 8000e46:	b94b      	cbnz	r3, 8000e5c <__swsetup_r+0x7c>
 8000e48:	89a3      	ldrh	r3, [r4, #12]
 8000e4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e52:	d003      	beq.n	8000e5c <__swsetup_r+0x7c>
 8000e54:	4621      	mov	r1, r4
 8000e56:	4628      	mov	r0, r5
 8000e58:	f000 f840 	bl	8000edc <__smakebuf_r>
 8000e5c:	89a0      	ldrh	r0, [r4, #12]
 8000e5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e62:	f010 0301 	ands.w	r3, r0, #1
 8000e66:	d00a      	beq.n	8000e7e <__swsetup_r+0x9e>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60a3      	str	r3, [r4, #8]
 8000e6c:	6963      	ldr	r3, [r4, #20]
 8000e6e:	425b      	negs	r3, r3
 8000e70:	61a3      	str	r3, [r4, #24]
 8000e72:	6923      	ldr	r3, [r4, #16]
 8000e74:	b943      	cbnz	r3, 8000e88 <__swsetup_r+0xa8>
 8000e76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000e7a:	d1c4      	bne.n	8000e06 <__swsetup_r+0x26>
 8000e7c:	bd38      	pop	{r3, r4, r5, pc}
 8000e7e:	0781      	lsls	r1, r0, #30
 8000e80:	bf58      	it	pl
 8000e82:	6963      	ldrpl	r3, [r4, #20]
 8000e84:	60a3      	str	r3, [r4, #8]
 8000e86:	e7f4      	b.n	8000e72 <__swsetup_r+0x92>
 8000e88:	2000      	movs	r0, #0
 8000e8a:	e7f7      	b.n	8000e7c <__swsetup_r+0x9c>
 8000e8c:	20000058 	.word	0x20000058

08000e90 <__swhatbuf_r>:
 8000e90:	b570      	push	{r4, r5, r6, lr}
 8000e92:	460c      	mov	r4, r1
 8000e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	b096      	sub	sp, #88	; 0x58
 8000e9c:	4615      	mov	r5, r2
 8000e9e:	461e      	mov	r6, r3
 8000ea0:	da0d      	bge.n	8000ebe <__swhatbuf_r+0x2e>
 8000ea2:	89a3      	ldrh	r3, [r4, #12]
 8000ea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ea8:	f04f 0100 	mov.w	r1, #0
 8000eac:	bf0c      	ite	eq
 8000eae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000eb2:	2340      	movne	r3, #64	; 0x40
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	6031      	str	r1, [r6, #0]
 8000eb8:	602b      	str	r3, [r5, #0]
 8000eba:	b016      	add	sp, #88	; 0x58
 8000ebc:	bd70      	pop	{r4, r5, r6, pc}
 8000ebe:	466a      	mov	r2, sp
 8000ec0:	f000 f858 	bl	8000f74 <_fstat_r>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	dbec      	blt.n	8000ea2 <__swhatbuf_r+0x12>
 8000ec8:	9901      	ldr	r1, [sp, #4]
 8000eca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000ece:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000ed2:	4259      	negs	r1, r3
 8000ed4:	4159      	adcs	r1, r3
 8000ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eda:	e7eb      	b.n	8000eb4 <__swhatbuf_r+0x24>

08000edc <__smakebuf_r>:
 8000edc:	898b      	ldrh	r3, [r1, #12]
 8000ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ee0:	079d      	lsls	r5, r3, #30
 8000ee2:	4606      	mov	r6, r0
 8000ee4:	460c      	mov	r4, r1
 8000ee6:	d507      	bpl.n	8000ef8 <__smakebuf_r+0x1c>
 8000ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000eec:	6023      	str	r3, [r4, #0]
 8000eee:	6123      	str	r3, [r4, #16]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	6163      	str	r3, [r4, #20]
 8000ef4:	b002      	add	sp, #8
 8000ef6:	bd70      	pop	{r4, r5, r6, pc}
 8000ef8:	ab01      	add	r3, sp, #4
 8000efa:	466a      	mov	r2, sp
 8000efc:	f7ff ffc8 	bl	8000e90 <__swhatbuf_r>
 8000f00:	9900      	ldr	r1, [sp, #0]
 8000f02:	4605      	mov	r5, r0
 8000f04:	4630      	mov	r0, r6
 8000f06:	f7ff fdb5 	bl	8000a74 <_malloc_r>
 8000f0a:	b948      	cbnz	r0, 8000f20 <__smakebuf_r+0x44>
 8000f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f10:	059a      	lsls	r2, r3, #22
 8000f12:	d4ef      	bmi.n	8000ef4 <__smakebuf_r+0x18>
 8000f14:	f023 0303 	bic.w	r3, r3, #3
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	81a3      	strh	r3, [r4, #12]
 8000f1e:	e7e3      	b.n	8000ee8 <__smakebuf_r+0xc>
 8000f20:	89a3      	ldrh	r3, [r4, #12]
 8000f22:	6020      	str	r0, [r4, #0]
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	81a3      	strh	r3, [r4, #12]
 8000f2a:	9b00      	ldr	r3, [sp, #0]
 8000f2c:	6163      	str	r3, [r4, #20]
 8000f2e:	9b01      	ldr	r3, [sp, #4]
 8000f30:	6120      	str	r0, [r4, #16]
 8000f32:	b15b      	cbz	r3, 8000f4c <__smakebuf_r+0x70>
 8000f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f38:	4630      	mov	r0, r6
 8000f3a:	f000 f82d 	bl	8000f98 <_isatty_r>
 8000f3e:	b128      	cbz	r0, 8000f4c <__smakebuf_r+0x70>
 8000f40:	89a3      	ldrh	r3, [r4, #12]
 8000f42:	f023 0303 	bic.w	r3, r3, #3
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	81a3      	strh	r3, [r4, #12]
 8000f4c:	89a3      	ldrh	r3, [r4, #12]
 8000f4e:	431d      	orrs	r5, r3
 8000f50:	81a5      	strh	r5, [r4, #12]
 8000f52:	e7cf      	b.n	8000ef4 <__smakebuf_r+0x18>

08000f54 <_close_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4d06      	ldr	r5, [pc, #24]	; (8000f70 <_close_r+0x1c>)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	602b      	str	r3, [r5, #0]
 8000f60:	f7ff fb83 	bl	800066a <_close>
 8000f64:	1c43      	adds	r3, r0, #1
 8000f66:	d102      	bne.n	8000f6e <_close_r+0x1a>
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	b103      	cbz	r3, 8000f6e <_close_r+0x1a>
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
 8000f70:	200001c4 	.word	0x200001c4

08000f74 <_fstat_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4d07      	ldr	r5, [pc, #28]	; (8000f94 <_fstat_r+0x20>)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	602b      	str	r3, [r5, #0]
 8000f82:	f7ff fb7d 	bl	8000680 <_fstat>
 8000f86:	1c43      	adds	r3, r0, #1
 8000f88:	d102      	bne.n	8000f90 <_fstat_r+0x1c>
 8000f8a:	682b      	ldr	r3, [r5, #0]
 8000f8c:	b103      	cbz	r3, 8000f90 <_fstat_r+0x1c>
 8000f8e:	6023      	str	r3, [r4, #0]
 8000f90:	bd38      	pop	{r3, r4, r5, pc}
 8000f92:	bf00      	nop
 8000f94:	200001c4 	.word	0x200001c4

08000f98 <_isatty_r>:
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4d06      	ldr	r5, [pc, #24]	; (8000fb4 <_isatty_r+0x1c>)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	602b      	str	r3, [r5, #0]
 8000fa4:	f7ff fb7b 	bl	800069e <_isatty>
 8000fa8:	1c43      	adds	r3, r0, #1
 8000faa:	d102      	bne.n	8000fb2 <_isatty_r+0x1a>
 8000fac:	682b      	ldr	r3, [r5, #0]
 8000fae:	b103      	cbz	r3, 8000fb2 <_isatty_r+0x1a>
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	bd38      	pop	{r3, r4, r5, pc}
 8000fb4:	200001c4 	.word	0x200001c4

08000fb8 <_lseek_r>:
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4d07      	ldr	r5, [pc, #28]	; (8000fd8 <_lseek_r+0x20>)
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	602a      	str	r2, [r5, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f7ff fb73 	bl	80006b2 <_lseek>
 8000fcc:	1c43      	adds	r3, r0, #1
 8000fce:	d102      	bne.n	8000fd6 <_lseek_r+0x1e>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	b103      	cbz	r3, 8000fd6 <_lseek_r+0x1e>
 8000fd4:	6023      	str	r3, [r4, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	200001c4 	.word	0x200001c4

08000fdc <_read_r>:
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4d07      	ldr	r5, [pc, #28]	; (8000ffc <_read_r+0x20>)
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	602a      	str	r2, [r5, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	f7ff fb04 	bl	80005f8 <_read>
 8000ff0:	1c43      	adds	r3, r0, #1
 8000ff2:	d102      	bne.n	8000ffa <_read_r+0x1e>
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	b103      	cbz	r3, 8000ffa <_read_r+0x1e>
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	200001c4 	.word	0x200001c4

08001000 <_sbrk_r>:
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4d06      	ldr	r5, [pc, #24]	; (800101c <_sbrk_r+0x1c>)
 8001004:	2300      	movs	r3, #0
 8001006:	4604      	mov	r4, r0
 8001008:	4608      	mov	r0, r1
 800100a:	602b      	str	r3, [r5, #0]
 800100c:	f7ff fb5e 	bl	80006cc <_sbrk>
 8001010:	1c43      	adds	r3, r0, #1
 8001012:	d102      	bne.n	800101a <_sbrk_r+0x1a>
 8001014:	682b      	ldr	r3, [r5, #0]
 8001016:	b103      	cbz	r3, 800101a <_sbrk_r+0x1a>
 8001018:	6023      	str	r3, [r4, #0]
 800101a:	bd38      	pop	{r3, r4, r5, pc}
 800101c:	200001c4 	.word	0x200001c4

08001020 <_write_r>:
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	4d07      	ldr	r5, [pc, #28]	; (8001040 <_write_r+0x20>)
 8001024:	4604      	mov	r4, r0
 8001026:	4608      	mov	r0, r1
 8001028:	4611      	mov	r1, r2
 800102a:	2200      	movs	r2, #0
 800102c:	602a      	str	r2, [r5, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	f7ff faff 	bl	8000632 <_write>
 8001034:	1c43      	adds	r3, r0, #1
 8001036:	d102      	bne.n	800103e <_write_r+0x1e>
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	b103      	cbz	r3, 800103e <_write_r+0x1e>
 800103c:	6023      	str	r3, [r4, #0]
 800103e:	bd38      	pop	{r3, r4, r5, pc}
 8001040:	200001c4 	.word	0x200001c4

08001044 <_free_r>:
 8001044:	b538      	push	{r3, r4, r5, lr}
 8001046:	4605      	mov	r5, r0
 8001048:	2900      	cmp	r1, #0
 800104a:	d041      	beq.n	80010d0 <_free_r+0x8c>
 800104c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001050:	1f0c      	subs	r4, r1, #4
 8001052:	2b00      	cmp	r3, #0
 8001054:	bfb8      	it	lt
 8001056:	18e4      	addlt	r4, r4, r3
 8001058:	f7ff fe36 	bl	8000cc8 <__malloc_lock>
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <_free_r+0x90>)
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	b933      	cbnz	r3, 8001070 <_free_r+0x2c>
 8001062:	6063      	str	r3, [r4, #4]
 8001064:	6014      	str	r4, [r2, #0]
 8001066:	4628      	mov	r0, r5
 8001068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800106c:	f7ff be32 	b.w	8000cd4 <__malloc_unlock>
 8001070:	42a3      	cmp	r3, r4
 8001072:	d908      	bls.n	8001086 <_free_r+0x42>
 8001074:	6820      	ldr	r0, [r4, #0]
 8001076:	1821      	adds	r1, r4, r0
 8001078:	428b      	cmp	r3, r1
 800107a:	bf01      	itttt	eq
 800107c:	6819      	ldreq	r1, [r3, #0]
 800107e:	685b      	ldreq	r3, [r3, #4]
 8001080:	1809      	addeq	r1, r1, r0
 8001082:	6021      	streq	r1, [r4, #0]
 8001084:	e7ed      	b.n	8001062 <_free_r+0x1e>
 8001086:	461a      	mov	r2, r3
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	b10b      	cbz	r3, 8001090 <_free_r+0x4c>
 800108c:	42a3      	cmp	r3, r4
 800108e:	d9fa      	bls.n	8001086 <_free_r+0x42>
 8001090:	6811      	ldr	r1, [r2, #0]
 8001092:	1850      	adds	r0, r2, r1
 8001094:	42a0      	cmp	r0, r4
 8001096:	d10b      	bne.n	80010b0 <_free_r+0x6c>
 8001098:	6820      	ldr	r0, [r4, #0]
 800109a:	4401      	add	r1, r0
 800109c:	1850      	adds	r0, r2, r1
 800109e:	4283      	cmp	r3, r0
 80010a0:	6011      	str	r1, [r2, #0]
 80010a2:	d1e0      	bne.n	8001066 <_free_r+0x22>
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	6053      	str	r3, [r2, #4]
 80010aa:	4408      	add	r0, r1
 80010ac:	6010      	str	r0, [r2, #0]
 80010ae:	e7da      	b.n	8001066 <_free_r+0x22>
 80010b0:	d902      	bls.n	80010b8 <_free_r+0x74>
 80010b2:	230c      	movs	r3, #12
 80010b4:	602b      	str	r3, [r5, #0]
 80010b6:	e7d6      	b.n	8001066 <_free_r+0x22>
 80010b8:	6820      	ldr	r0, [r4, #0]
 80010ba:	1821      	adds	r1, r4, r0
 80010bc:	428b      	cmp	r3, r1
 80010be:	bf04      	itt	eq
 80010c0:	6819      	ldreq	r1, [r3, #0]
 80010c2:	685b      	ldreq	r3, [r3, #4]
 80010c4:	6063      	str	r3, [r4, #4]
 80010c6:	bf04      	itt	eq
 80010c8:	1809      	addeq	r1, r1, r0
 80010ca:	6021      	streq	r1, [r4, #0]
 80010cc:	6054      	str	r4, [r2, #4]
 80010ce:	e7ca      	b.n	8001066 <_free_r+0x22>
 80010d0:	bd38      	pop	{r3, r4, r5, pc}
 80010d2:	bf00      	nop
 80010d4:	200001bc 	.word	0x200001bc

080010d8 <_init>:
 80010d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010da:	bf00      	nop
 80010dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010de:	bc08      	pop	{r3}
 80010e0:	469e      	mov	lr, r3
 80010e2:	4770      	bx	lr

080010e4 <_fini>:
 80010e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e6:	bf00      	nop
 80010e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ea:	bc08      	pop	{r3}
 80010ec:	469e      	mov	lr, r3
 80010ee:	4770      	bx	lr
