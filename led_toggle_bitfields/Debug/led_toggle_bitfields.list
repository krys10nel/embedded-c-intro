
led_toggle_bitfields.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  4 .ARM          00000000  0800037c  0800037c  00010384  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800037c  08000384  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000380  08000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010384  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000103ae  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000493  00000000  00000000  000103f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000000e2  00000000  00000000  00010884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  00010968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000002d  00000000  00000000  000109b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000f62  00000000  00000000  000109dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000493  00000000  00000000  0001193f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003d73  00000000  00000000  00011dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000058  00000000  00000000  00015b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00015ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000364 	.word	0x08000364

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000364 	.word	0x08000364

080001c8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
	// Orange LED GPIOD13
	// Green LED GPIOD12
	// Blue LED GPIOD15 on AHB1

	// AHB1 and GPIOD Mode and Output register address + offset
	RCC_AHB1ENR_t volatile *const pClkCtrlReg 	= (RCC_AHB1ENR_t*) (0x40023800 + 0x30);	// RCC_AHB1ENR
 80001ce:	4b3a      	ldr	r3, [pc, #232]	; (80002b8 <main+0xf0>)
 80001d0:	60fb      	str	r3, [r7, #12]
	GPIOx_MODER_t volatile *const pPortDModeReg = (GPIOx_MODER_t*) (0x40020C00 + 0x00);	// GPIOx_MODER
 80001d2:	4b3a      	ldr	r3, [pc, #232]	; (80002bc <main+0xf4>)
 80001d4:	60bb      	str	r3, [r7, #8]
	GPIOx_ODR_t volatile *const pPortDOutReg 	= (GPIOx_ODR_t*) (0x40020C00 + 0x14);	// GPIOx_ODR
 80001d6:	4b3a      	ldr	r3, [pc, #232]	; (80002c0 <main+0xf8>)
 80001d8:	607b      	str	r3, [r7, #4]

	// Enabling clock on Port D (SET 3rd bit position to 1 in RCC_AHB1ENR)
	pClkCtrlReg->GPIOD_EN = 1;
 80001da:	68fa      	ldr	r2, [r7, #12]
 80001dc:	6813      	ldr	r3, [r2, #0]
 80001de:	f043 0308 	orr.w	r3, r3, #8
 80001e2:	6013      	str	r3, [r2, #0]

	// Clearing port D12-15 for rewrite
	pPortDModeReg->PIN14 = 1;
 80001e4:	68ba      	ldr	r2, [r7, #8]
 80001e6:	6813      	ldr	r3, [r2, #0]
 80001e8:	2101      	movs	r1, #1
 80001ea:	f361 731d 	bfi	r3, r1, #28, #2
 80001ee:	6013      	str	r3, [r2, #0]
	pPortDModeReg->PIN13 = 1;
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	6813      	ldr	r3, [r2, #0]
 80001f4:	2101      	movs	r1, #1
 80001f6:	f361 639b 	bfi	r3, r1, #26, #2
 80001fa:	6013      	str	r3, [r2, #0]
	pPortDModeReg->PIN12 = 1;
 80001fc:	68ba      	ldr	r2, [r7, #8]
 80001fe:	6813      	ldr	r3, [r2, #0]
 8000200:	2101      	movs	r1, #1
 8000202:	f361 6319 	bfi	r3, r1, #24, #2
 8000206:	6013      	str	r3, [r2, #0]
	pPortDModeReg->PIN15 = 1;
 8000208:	68ba      	ldr	r2, [r7, #8]
 800020a:	6813      	ldr	r3, [r2, #0]
 800020c:	2101      	movs	r1, #1
 800020e:	f361 739f 	bfi	r3, r1, #30, #2
 8000212:	6013      	str	r3, [r2, #0]

	/* Loop Delay */
	while(1) {
		// Setting port D15 output to 1 (SET 15th bit position to 1 in GPIOx_ODR)
		pPortDOutReg->PIN15 = 1;
 8000214:	687a      	ldr	r2, [r7, #4]
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800021c:	6013      	str	r3, [r2, #0]

		for(uint32_t i = 0; i < 300000; i++); // traps processor in a loop that executes 300k times
 800021e:	2300      	movs	r3, #0
 8000220:	61fb      	str	r3, [r7, #28]
 8000222:	e002      	b.n	800022a <main+0x62>
 8000224:	69fb      	ldr	r3, [r7, #28]
 8000226:	3301      	adds	r3, #1
 8000228:	61fb      	str	r3, [r7, #28]
 800022a:	69fb      	ldr	r3, [r7, #28]
 800022c:	4a25      	ldr	r2, [pc, #148]	; (80002c4 <main+0xfc>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d9f8      	bls.n	8000224 <main+0x5c>

		// Turn off LED / CLEAR
		pPortDOutReg->PIN15 = 0;
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	6813      	ldr	r3, [r2, #0]
 8000236:	f36f 33cf 	bfc	r3, #15, #1
 800023a:	6013      	str	r3, [r2, #0]
		pPortDOutReg->PIN14 = 1;
 800023c:	687a      	ldr	r2, [r7, #4]
 800023e:	6813      	ldr	r3, [r2, #0]
 8000240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000244:	6013      	str	r3, [r2, #0]

		for(uint32_t i = 0; i < 300000; i++);
 8000246:	2300      	movs	r3, #0
 8000248:	61bb      	str	r3, [r7, #24]
 800024a:	e002      	b.n	8000252 <main+0x8a>
 800024c:	69bb      	ldr	r3, [r7, #24]
 800024e:	3301      	adds	r3, #1
 8000250:	61bb      	str	r3, [r7, #24]
 8000252:	69bb      	ldr	r3, [r7, #24]
 8000254:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <main+0xfc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d9f8      	bls.n	800024c <main+0x84>

		pPortDOutReg->PIN14 = 0;
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	6813      	ldr	r3, [r2, #0]
 800025e:	f36f 338e 	bfc	r3, #14, #1
 8000262:	6013      	str	r3, [r2, #0]
		pPortDOutReg->PIN13 = 1;
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026c:	6013      	str	r3, [r2, #0]

		for(uint32_t i = 0; i < 300000; i++);
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
 8000272:	e002      	b.n	800027a <main+0xb2>
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	3301      	adds	r3, #1
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	4a11      	ldr	r2, [pc, #68]	; (80002c4 <main+0xfc>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d9f8      	bls.n	8000274 <main+0xac>

		pPortDOutReg->PIN13 = 0;
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	6813      	ldr	r3, [r2, #0]
 8000286:	f36f 334d 	bfc	r3, #13, #1
 800028a:	6013      	str	r3, [r2, #0]
		pPortDOutReg->PIN12 = 1;
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000294:	6013      	str	r3, [r2, #0]

		for(uint32_t i = 0; i < 300000; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	613b      	str	r3, [r7, #16]
 800029a:	e002      	b.n	80002a2 <main+0xda>
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	3301      	adds	r3, #1
 80002a0:	613b      	str	r3, [r7, #16]
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	4a07      	ldr	r2, [pc, #28]	; (80002c4 <main+0xfc>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <main+0xd4>

		pPortDOutReg->PIN12 = 0;
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	6813      	ldr	r3, [r2, #0]
 80002ae:	f36f 330c 	bfc	r3, #12, #1
 80002b2:	6013      	str	r3, [r2, #0]
		pPortDOutReg->PIN15 = 1;
 80002b4:	e7ae      	b.n	8000214 <main+0x4c>
 80002b6:	bf00      	nop
 80002b8:	40023830 	.word	0x40023830
 80002bc:	40020c00 	.word	0x40020c00
 80002c0:	40020c14 	.word	0x40020c14
 80002c4:	000493df 	.word	0x000493df

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f811 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff65 	bl	80001c8 <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	4d0d      	ldr	r5, [pc, #52]	; (8000354 <__libc_init_array+0x38>)
 8000320:	4c0d      	ldr	r4, [pc, #52]	; (8000358 <__libc_init_array+0x3c>)
 8000322:	1b64      	subs	r4, r4, r5
 8000324:	10a4      	asrs	r4, r4, #2
 8000326:	2600      	movs	r6, #0
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	4d0b      	ldr	r5, [pc, #44]	; (800035c <__libc_init_array+0x40>)
 800032e:	4c0c      	ldr	r4, [pc, #48]	; (8000360 <__libc_init_array+0x44>)
 8000330:	f000 f818 	bl	8000364 <_init>
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	2600      	movs	r6, #0
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
